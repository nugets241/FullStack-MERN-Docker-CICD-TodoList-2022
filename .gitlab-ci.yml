variables:
  REMOTE_HOST: deploy@22wsp3005projectteam3
  BACKEND_IMAGE: ${CI_REGISTRY_IMAGE}/backend
  FRONTEND_IMAGE: ${CI_REGISTRY_IMAGE}/frontend
  DB_URI: ${DB_URI}
  MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
  MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}

stages:
  - test
  - build
  - deploy

test_other:
  image: node:latest
  stage: test
  script:
    # Go to backend directory
    - cd backend
    # Run npm commands
    - npm install && npm run lint && npm test
    # Go to frontend directory
    - cd ../frontend
    # Remove package-lock.json because of a bug
    # (https://stackoverflow.com/questions/63321707/react-npm-install-fails)
    - rm package-lock.json
    # Run npm commands
    - npm install && npm test
  except:
    - main

test_main:
  image: node:latest
  stage: test
  script:
    # Go to backend directory
    - cd backend
    # Run npm commands
    - npm install && npm run lint && npm test
    # Go to frontend directory
    - cd ../frontend
    # Remove package-lock.json because of a bug
    # (https://stackoverflow.com/questions/63321707/react-npm-install-fails)
    - rm package-lock.json
    # Run npm commands
    - npm install && npm test
  only:
    - main

build_other:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    # Build & push backend
    - docker build -f backend/DockerfileServer -t "${BACKEND_IMAGE}" .
    # Build & push frontend
    - docker build -f frontend/DockerfileServer -t "${FRONTEND_IMAGE}" .
  except:
    - main

build_main:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    # Build & push backend
    - docker build -f backend/DockerfileServer -t "${BACKEND_IMAGE}" .
    - docker push "${BACKEND_IMAGE}"
    # Build & push frontend
    - docker build -f frontend/DockerfileServer -t "${FRONTEND_IMAGE}" .
    - docker push "${FRONTEND_IMAGE}"
  only:
    - main

deploy_main:
  image: alpine:latest
  stage: deploy
  environment:
    name: main
    url: 172.16.5.184
  script:
    - apk update && apk add rsync openssh curl
    # Prepare SSH settings
    - mkdir -p ~/.ssh && (umask  077 ; echo "${DEPLOY_KEY_PRIVATE}" | base64 -d > ~/.ssh/id_rsa)
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    # Prepare files for transfer
    - mkdir remote_pdir
    - cp docker-compose.server.yml remote_pdir/docker-compose.yml
    - echo "BACKEND_IMAGE=${BACKEND_IMAGE}" >> remote_pdir/.env
    - echo "FRONTEND_IMAGE=${FRONTEND_IMAGE}" >> remote_pdir/.env
    - echo "DB_URI=${DB_URI}" >> remote_pdir/.env
    - echo "MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}" >> remote_pdir/.env
    - echo "MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}" >> remote_pdir/.env
    # Transfer to server
    - rsync -r remote_pdir "${REMOTE_HOST}:./"
    # Run commands on the server
    - ssh ${REMOTE_HOST} /bin/bash
      "
      echo 'Starting..';
      cd ~/remote_pdir;
      docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY;
      docker-compose pull;
      docker-compose up -d;
      "
  only:
    - main
